name: CI/CD 

on:
  push:
    branches: [ "develop" ]

env:
  ECS_TASK_DEFINITION: task-definition.json 
  CONTAINER_NAME: kuizu-users-microservice
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}

permissions:
  contents: read
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
  test:
    needs: [build]
    name: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: npm test
  deploy:
    needs: [build, test]
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Google Chat Notification
      uses: Co-qn/google-chat-notification@releases/v1
      with:
        name: Build Starting
        url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        status: ${{ job.status }}
      if: always()

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
            PG_PASSWORD=${{ secrets.PG_PASSWORD }}
            PG_DATABASE=${{ secrets.PG_DATABASE }}
            PG_PORT=${{ secrets.PG_PORT }}
            PG_USER=${{ secrets.PG_USER }}
            PG_HOST=${{ secrets.PG_HOST }}
            PORT=${{ secrets.PORT }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    - name: Google Chat Notification
      uses: Co-qn/google-chat-notification@releases/v1
      with:
        name: Build ended
        url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        status: ${{ job.status }}
      if: always()
